/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
    private:
    ListNode* reverse(ListNode* l1){
    ListNode* prev=nullptr;
    ListNode* curr=l1;
    ListNode* forward=nullptr;

    while(curr){
        forward=curr->next;
        curr->next=prev;
        prev=curr;
        curr=forward;

    }
    return prev;
}
ListNode* add(ListNode* l1,ListNode* l2){
    int carry=0;
    ListNode* anshead=nullptr;
    ListNode* anstail=nullptr;
    
    while(l1 || l2 ||carry){
    int val1=0;
    if(l1!=nullptr)
    val1=l1->val;

    int val2=0;
    if(l2!=nullptr)
    val2=l2->val;

    int sum= carry+val1+val2;

    int dig=sum%10;

    insertattail(anshead,anstail,dig);

    carry=sum/10;

    if(l1!=nullptr)
    l1=l1->next;

    if(l2!=nullptr)
    l2=l2->next;
    }

return anshead;

}

void insertattail(ListNode* &head,ListNode* &tail,int data){

ListNode* temp= new ListNode(data);
if(head==nullptr){
    head=temp;
    tail=temp;
    return;
}
else{
    tail -> next = temp;
    tail = temp;
}

}

public:

ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {

//just reverse the nodes and then same as add two numbersI (1st part).
        
 l1=reverse(l1);
 l2=reverse(l2);

ListNode* ans =add(l1,l2);

 //ans then reverse the ans too
 ans=reverse(ans);

return ans;
        
        
        
    }
};